import Head from 'next/head';
import Image from 'next/image';
import Header from '../components/Header';
import { ReactFlowProvider } from 'react-flow-renderer';
import OverviewFlow from '../components/Flowchart';
import { GetServerSideProps } from 'next';
import { orderBy } from 'lodash';
import { ToastContainer } from 'react-toastify';

import styles from '../styles/Home.module.css'

interface IProps {
  project?: Object;
  systems?: Array<Object>;
  actors?: Array<Object>;
  vertices?: Array<Object>;
  criteriaUX?: Array<Object>;
  criteriaISO?: Array<Object>;
}

const Home: React.FC<IProps> = ({ project, systems, actors, vertices, criteriaUX, criteriaISO }) => {
  return (
    <div className={styles.container}>
      <Head>
        <title>AED</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Header />

      <main className={styles.main} style={{ width: '100%', height: '100%' }}>
        <ReactFlowProvider>
          <OverviewFlow 
            project={project} 
            systems={orderBy(systems, ['pk'], ['desc'])}
            actors={orderBy(actors, ['pk'], ['desc'])}
            vertices={orderBy(vertices, ['pk'], ['desc'])}
            criteriaUX={orderBy(criteriaUX, ['pk'], ['desc'])}
            criteriaISO={orderBy(criteriaISO, ['pk'], ['desc'])} />
        </ReactFlowProvider>
      </main>
{/* 
      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer> */}
      <ToastContainer
        position="top-right"
        autoClose={3000}
        hideProgressBar={false}
        newestOnTop={false}
        closeOnClick
        rtl={false}
        pauseOnFocusLoss
        draggable
        pauseOnHover
      />
    </div>
  )
}

export default Home;

export const getServerSideProps: GetServerSideProps = async (ctx) => {
  const id = ctx?.params?.id;

  const resProject = await fetch(
    `${process.env.NEXT_PUBLIC_API_URL}/projetos/${id}`
  );

  const project = await resProject.json();

  const resSystems = await fetch(
    `${process.env.NEXT_PUBLIC_API_URL}/sistemas/?projeto=${id}`
  );

  const systems = await resSystems.json();

  const resActors = await fetch(
    `${process.env.NEXT_PUBLIC_API_URL}/atores/?projeto=${id}`
  );

  const actors = await resActors.json();

  const resVertices = await fetch(
    `${process.env.NEXT_PUBLIC_API_URL}/vertices/?projeto=${id}`
  );

  const vertices = await resVertices.json();

  const resCriteriaUX = await fetch(
    `${process.env.NEXT_PUBLIC_API_URL}/criterios-ux`
  );

  const criteriaUX = await resCriteriaUX.json();

  const resCriteriaISO = await fetch(
    `${process.env.NEXT_PUBLIC_API_URL}/criterios-iso`
  );

  const criteriaISO = await resCriteriaISO.json();
  
  return {
    props: {
      project,
      systems,
      actors,
      vertices,
      criteriaUX,
      criteriaISO
    }
  };
}